/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/notistack";
exports.ids = ["vendor-chunks/notistack"];
exports.modules = {

/***/ "(ssr)/./node_modules/notistack/index.js":
/*!*****************************************!*\
  !*** ./node_modules/notistack/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./notistack.cjs.development.js */ \"(ssr)/./node_modules/notistack/notistack.cjs.development.js\")\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm90aXN0YWNrL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFDWTs7QUFFWixJQUFJLEtBQXFDLEVBQUUsRUFFMUMsQ0FBQztBQUNGLEVBQUUseUlBQTBEO0FBQzVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FkZW5jZS1jb29rYm9vay8uL25vZGVfbW9kdWxlcy9ub3Rpc3RhY2svaW5kZXguanM/MzZkMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbid1c2Ugc3RyaWN0J1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbm90aXN0YWNrLmNqcy5wcm9kdWN0aW9uLm1pbi5qcycpXG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbm90aXN0YWNrLmNqcy5kZXZlbG9wbWVudC5qcycpXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/notistack/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/notistack/node_modules/clsx/dist/clsx.js":
/*!***************************************************************!*\
  !*** ./node_modules/notistack/node_modules/clsx/dist/clsx.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("function e(r){var o,t,f=\"\";if(\"string\"==typeof r||\"number\"==typeof r)f+=r;else if(\"object\"==typeof r)if(Array.isArray(r))for(o=0;o<r.length;o++)r[o]&&(t=e(r[o]))&&(f&&(f+=\" \"),f+=t);else for(o in r)r[o]&&(f&&(f+=\" \"),f+=o);return f}function r(){for(var r,o,t=0,f=\"\";t<arguments.length;)(r=arguments[t++])&&(o=e(r))&&(f&&(f+=\" \"),f+=o);return f}module.exports=r,module.exports.clsx=r;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm90aXN0YWNrL25vZGVfbW9kdWxlcy9jbHN4L2Rpc3QvY2xzeC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxjQUFjLGFBQWEsK0NBQStDLHVEQUF1RCxXQUFXLDBDQUEwQyx5Q0FBeUMsU0FBUyxhQUFhLHFCQUFxQixtQkFBbUIsa0RBQWtELFNBQVMsaUJBQWlCLG1CQUFtQiIsInNvdXJjZXMiOlsid2VicGFjazovL2NhZGVuY2UtY29va2Jvb2svLi9ub2RlX21vZHVsZXMvbm90aXN0YWNrL25vZGVfbW9kdWxlcy9jbHN4L2Rpc3QvY2xzeC5qcz9jN2Q4Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGUocil7dmFyIG8sdCxmPVwiXCI7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHJ8fFwibnVtYmVyXCI9PXR5cGVvZiByKWYrPXI7ZWxzZSBpZihcIm9iamVjdFwiPT10eXBlb2YgcilpZihBcnJheS5pc0FycmF5KHIpKWZvcihvPTA7bzxyLmxlbmd0aDtvKyspcltvXSYmKHQ9ZShyW29dKSkmJihmJiYoZis9XCIgXCIpLGYrPXQpO2Vsc2UgZm9yKG8gaW4gcilyW29dJiYoZiYmKGYrPVwiIFwiKSxmKz1vKTtyZXR1cm4gZn1mdW5jdGlvbiByKCl7Zm9yKHZhciByLG8sdD0wLGY9XCJcIjt0PGFyZ3VtZW50cy5sZW5ndGg7KShyPWFyZ3VtZW50c1t0KytdKSYmKG89ZShyKSkmJihmJiYoZis9XCIgXCIpLGYrPW8pO3JldHVybiBmfW1vZHVsZS5leHBvcnRzPXIsbW9kdWxlLmV4cG9ydHMuY2xzeD1yOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/notistack/node_modules/clsx/dist/clsx.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/notistack/notistack.cjs.development.js":
/*!*************************************************************!*\
  !*** ./node_modules/notistack/notistack.cjs.development.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar React__default = _interopDefault(React);\nvar reactDom = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\nvar clsx = _interopDefault(__webpack_require__(/*! clsx */ \"(ssr)/./node_modules/notistack/node_modules/clsx/dist/clsx.js\"));\nvar goober = __webpack_require__(/*! goober */ \"(ssr)/./node_modules/goober/dist/goober.cjs\");\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nvar noOp = function noOp() {\n  return '';\n};\n\nvar SnackbarContext = /*#__PURE__*/React__default.createContext({\n  enqueueSnackbar: noOp,\n  closeSnackbar: noOp\n});\n\nvar breakpoints = {\n  downXs: '@media (max-width:599.95px)',\n  upSm: '@media (min-width:600px)'\n};\n\nvar capitalise = function capitalise(text) {\n  return text.charAt(0).toUpperCase() + text.slice(1);\n};\n\nvar originKeyExtractor = function originKeyExtractor(anchor) {\n  return \"\" + capitalise(anchor.vertical) + capitalise(anchor.horizontal);\n};\nvar isDefined = function isDefined(value) {\n  return !!value || value === 0;\n};\n\nvar UNMOUNTED = 'unmounted';\nvar EXITED = 'exited';\nvar ENTERING = 'entering';\nvar ENTERED = 'entered';\nvar EXITING = 'exiting';\n\nvar Transition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Transition, _React$Component);\n\n  function Transition(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    var appear = props.appear;\n    var initialStatus;\n    _this.appearStatus = null;\n\n    if (props[\"in\"]) {\n      if (appear) {\n        initialStatus = EXITED;\n        _this.appearStatus = ENTERING;\n      } else {\n        initialStatus = ENTERED;\n      }\n    } else if (props.unmountOnExit || props.mountOnEnter) {\n      initialStatus = UNMOUNTED;\n    } else {\n      initialStatus = EXITED;\n    }\n\n    _this.state = {\n      status: initialStatus\n    };\n    _this.nextCallback = null;\n    return _this;\n  }\n\n  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {\n    var nextIn = _ref[\"in\"];\n\n    if (nextIn && prevState.status === UNMOUNTED) {\n      return {\n        status: EXITED\n      };\n    }\n\n    return null;\n  };\n\n  var _proto = Transition.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.updateStatus(true, this.appearStatus);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var nextStatus = null;\n\n    if (prevProps !== this.props) {\n      var status = this.state.status;\n\n      if (this.props[\"in\"]) {\n        if (status !== ENTERING && status !== ENTERED) {\n          nextStatus = ENTERING;\n        }\n      } else if (status === ENTERING || status === ENTERED) {\n        nextStatus = EXITING;\n      }\n    }\n\n    this.updateStatus(false, nextStatus);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.cancelNextCallback();\n  };\n\n  _proto.getTimeouts = function getTimeouts() {\n    var timeout = this.props.timeout;\n    var enter = timeout;\n    var exit = timeout;\n\n    if (timeout != null && typeof timeout !== 'number' && typeof timeout !== 'string') {\n      exit = timeout.exit;\n      enter = timeout.enter;\n    }\n\n    return {\n      exit: exit,\n      enter: enter\n    };\n  };\n\n  _proto.updateStatus = function updateStatus(mounting, nextStatus) {\n    if (mounting === void 0) {\n      mounting = false;\n    }\n\n    if (nextStatus !== null) {\n      this.cancelNextCallback();\n\n      if (nextStatus === ENTERING) {\n        this.performEnter(mounting);\n      } else {\n        this.performExit();\n      }\n    } else if (this.props.unmountOnExit && this.state.status === EXITED) {\n      this.setState({\n        status: UNMOUNTED\n      });\n    }\n  };\n\n  _proto.performEnter = function performEnter(mounting) {\n    var _this2 = this;\n\n    var enter = this.props.enter;\n    var isAppearing = mounting;\n    var timeouts = this.getTimeouts();\n\n    if (!mounting && !enter) {\n      this.safeSetState({\n        status: ENTERED\n      }, function () {\n        if (_this2.props.onEntered) {\n          _this2.props.onEntered(_this2.node, isAppearing);\n        }\n      });\n      return;\n    }\n\n    if (this.props.onEnter) {\n      this.props.onEnter(this.node, isAppearing);\n    }\n\n    this.safeSetState({\n      status: ENTERING\n    }, function () {\n      if (_this2.props.onEntering) {\n        _this2.props.onEntering(_this2.node, isAppearing);\n      }\n\n      _this2.onTransitionEnd(timeouts.enter, function () {\n        _this2.safeSetState({\n          status: ENTERED\n        }, function () {\n          if (_this2.props.onEntered) {\n            _this2.props.onEntered(_this2.node, isAppearing);\n          }\n        });\n      });\n    });\n  };\n\n  _proto.performExit = function performExit() {\n    var _this3 = this;\n\n    var exit = this.props.exit;\n    var timeouts = this.getTimeouts(); // no exit animation skip right to EXITED\n\n    if (!exit) {\n      this.safeSetState({\n        status: EXITED\n      }, function () {\n        if (_this3.props.onExited) {\n          _this3.props.onExited(_this3.node);\n        }\n      });\n      return;\n    }\n\n    if (this.props.onExit) {\n      this.props.onExit(this.node);\n    }\n\n    this.safeSetState({\n      status: EXITING\n    }, function () {\n      if (_this3.props.onExiting) {\n        _this3.props.onExiting(_this3.node);\n      }\n\n      _this3.onTransitionEnd(timeouts.exit, function () {\n        _this3.safeSetState({\n          status: EXITED\n        }, function () {\n          if (_this3.props.onExited) {\n            _this3.props.onExited(_this3.node);\n          }\n        });\n      });\n    });\n  };\n\n  _proto.cancelNextCallback = function cancelNextCallback() {\n    if (this.nextCallback !== null && this.nextCallback.cancel) {\n      this.nextCallback.cancel();\n      this.nextCallback = null;\n    }\n  };\n\n  _proto.safeSetState = function safeSetState(nextState, callback) {\n    callback = this.setNextCallback(callback);\n    this.setState(nextState, callback);\n  };\n\n  _proto.setNextCallback = function setNextCallback(callback) {\n    var _this4 = this;\n\n    var active = true;\n\n    this.nextCallback = function () {\n      if (active) {\n        active = false;\n        _this4.nextCallback = null;\n        callback();\n      }\n    };\n\n    this.nextCallback.cancel = function () {\n      active = false;\n    };\n\n    return this.nextCallback;\n  };\n\n  _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {\n    this.setNextCallback(handler);\n    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;\n\n    if (!this.node || doesNotHaveTimeoutOrListener) {\n      setTimeout(this.nextCallback, 0);\n      return;\n    }\n\n    if (this.props.addEndListener) {\n      this.props.addEndListener(this.node, this.nextCallback);\n    }\n\n    if (timeout != null) {\n      setTimeout(this.nextCallback, timeout);\n    }\n  };\n\n  _proto.render = function render() {\n    var status = this.state.status;\n\n    if (status === UNMOUNTED) {\n      return null;\n    }\n\n    var _this$props = this.props,\n        children = _this$props.children,\n        childProps = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"in\", \"mountOnEnter\", \"unmountOnExit\", \"appear\", \"enter\", \"exit\", \"timeout\", \"addEndListener\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"nodeRef\"]);\n\n    return children(status, childProps);\n  };\n\n  _createClass(Transition, [{\n    key: \"node\",\n    get: function get() {\n      var _this$props$nodeRef;\n\n      var node = (_this$props$nodeRef = this.props.nodeRef) === null || _this$props$nodeRef === void 0 ? void 0 : _this$props$nodeRef.current;\n\n      if (!node) {\n        throw new Error('notistack - Custom snackbar is not refForwarding');\n      }\n\n      return node;\n    }\n  }]);\n\n  return Transition;\n}(React__default.Component);\n\nfunction noop() {//\n}\n\nTransition.defaultProps = {\n  \"in\": false,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  onEnter: noop,\n  onEntering: noop,\n  onEntered: noop,\n  onExit: noop,\n  onExiting: noop,\n  onExited: noop\n};\n\n/**\r\n * Credit to MUI team @ https://mui.com\r\n */\n/**\r\n * passes {value} to {ref}\r\n *\r\n * Useful if you want to expose the ref of an inner component to the public API\r\n * while still using it inside the component.\r\n * @param ref A ref callback or ref object. If anything falsy, this is a no-op.\r\n */\n\nfunction setRef(ref, value) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nfunction useForkRef(refA, refB) {\n  /**\r\n   * This will create a new function if the ref props change and are defined.\r\n   * This means react will call the old forkRef with `null` and the new forkRef\r\n   * with the ref. Cleanup naturally emerges from this behavior.\r\n   */\n  return React.useMemo(function () {\n    if (refA == null && refB == null) {\n      return null;\n    }\n\n    return function (refValue) {\n      setRef(refA, refValue);\n      setRef(refB, refValue);\n    };\n  }, [refA, refB]);\n}\n\nfunction getTransitionProps(props) {\n  var timeout = props.timeout,\n      _props$style = props.style,\n      style = _props$style === void 0 ? {} : _props$style,\n      mode = props.mode;\n  return {\n    duration: typeof timeout === 'object' ? timeout[mode] || 0 : timeout,\n    easing: style.transitionTimingFunction,\n    delay: style.transitionDelay\n  };\n}\n\n/**\r\n * Credit to MUI team @ https://mui.com\r\n */\nvar defaultEasing = {\n  // This is the most common easing curve.\n  easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',\n  // Objects enter the screen at full velocity from off-screen and\n  // slowly decelerate to a resting point.\n  easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',\n  // Objects leave the screen at full velocity. They do not decelerate when off-screen.\n  easeIn: 'cubic-bezier(0.4, 0, 1, 1)',\n  // The sharp curve is used by objects that may return to the screen at any time.\n  sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'\n};\n/**\r\n * CSS hack to force a repaint\r\n */\n\nvar reflow = function reflow(node) {\n  // We have to do something with node.scrollTop.\n  // Otherwise it's removed from the compiled code by optimisers\n  // eslint-disable-next-line no-self-assign\n  node.scrollTop = node.scrollTop;\n};\n\nvar formatMs = function formatMs(milliseconds) {\n  return Math.round(milliseconds) + \"ms\";\n};\n\nfunction createTransition(props, options) {\n  if (props === void 0) {\n    props = ['all'];\n  }\n\n  var _ref = options || {},\n      _ref$duration = _ref.duration,\n      duration = _ref$duration === void 0 ? 300 : _ref$duration,\n      _ref$easing = _ref.easing,\n      easing = _ref$easing === void 0 ? defaultEasing.easeInOut : _ref$easing,\n      _ref$delay = _ref.delay,\n      delay = _ref$delay === void 0 ? 0 : _ref$delay;\n\n  var properties = Array.isArray(props) ? props : [props];\n  return properties.map(function (animatedProp) {\n    var formattedDuration = typeof duration === 'string' ? duration : formatMs(duration);\n    var formattedDelay = typeof delay === 'string' ? delay : formatMs(delay);\n    return animatedProp + \" \" + formattedDuration + \" \" + easing + \" \" + formattedDelay;\n  }).join(',');\n}\n\nfunction ownerDocument(node) {\n  return node && node.ownerDocument || document;\n}\n\nfunction ownerWindow(node) {\n  var doc = ownerDocument(node);\n  return doc.defaultView || window;\n}\n/**\r\n * Corresponds to 10 frames at 60 Hz.\r\n * A few bytes payload overhead when lodash/debounce is ~3 kB and debounce ~300 B.\r\n */\n\n\nfunction debounce(func, wait) {\n  if (wait === void 0) {\n    wait = 166;\n  }\n\n  var timeout;\n\n  function debounced() {\n    var _this = this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var later = function later() {\n      // @ts-ignore\n      func.apply(_this, args);\n    };\n\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  }\n\n  debounced.clear = function () {\n    clearTimeout(timeout);\n  };\n\n  return debounced;\n}\n/**\r\n * Translate the node so it can't be seen on the screen.\r\n * Later, we're going to translate the node back to its original location with `none`.\r\n */\n\n\nfunction getTranslateValue(direction, node) {\n  var rect = node.getBoundingClientRect();\n  var containerWindow = ownerWindow(node);\n  var transform;\n\n  if (node.fakeTransform) {\n    transform = node.fakeTransform;\n  } else {\n    var computedStyle = containerWindow.getComputedStyle(node);\n    transform = computedStyle.getPropertyValue('-webkit-transform') || computedStyle.getPropertyValue('transform');\n  }\n\n  var offsetX = 0;\n  var offsetY = 0;\n\n  if (transform && transform !== 'none' && typeof transform === 'string') {\n    var transformValues = transform.split('(')[1].split(')')[0].split(',');\n    offsetX = parseInt(transformValues[4], 10);\n    offsetY = parseInt(transformValues[5], 10);\n  }\n\n  switch (direction) {\n    case 'left':\n      return \"translateX(\" + (containerWindow.innerWidth + offsetX - rect.left) + \"px)\";\n\n    case 'right':\n      return \"translateX(-\" + (rect.left + rect.width - offsetX) + \"px)\";\n\n    case 'up':\n      return \"translateY(\" + (containerWindow.innerHeight + offsetY - rect.top) + \"px)\";\n\n    default:\n      // down\n      return \"translateY(-\" + (rect.top + rect.height - offsetY) + \"px)\";\n  }\n}\n\nfunction setTranslateValue(direction, node) {\n  if (!node) return;\n  var transform = getTranslateValue(direction, node);\n\n  if (transform) {\n    node.style.webkitTransform = transform;\n    node.style.transform = transform;\n  }\n}\n\nvar Slide = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var children = props.children,\n      _props$direction = props.direction,\n      direction = _props$direction === void 0 ? 'down' : _props$direction,\n      inProp = props[\"in\"],\n      style = props.style,\n      _props$timeout = props.timeout,\n      timeout = _props$timeout === void 0 ? 0 : _props$timeout,\n      onEnter = props.onEnter,\n      onEntered = props.onEntered,\n      onExit = props.onExit,\n      onExited = props.onExited,\n      other = _objectWithoutPropertiesLoose(props, [\"children\", \"direction\", \"in\", \"style\", \"timeout\", \"onEnter\", \"onEntered\", \"onExit\", \"onExited\"]);\n\n  var nodeRef = React.useRef(null);\n  var handleRefIntermediary = useForkRef(children.ref, nodeRef);\n  var handleRef = useForkRef(handleRefIntermediary, ref);\n\n  var handleEnter = function handleEnter(node, isAppearing) {\n    setTranslateValue(direction, node);\n    reflow(node);\n\n    if (onEnter) {\n      onEnter(node, isAppearing);\n    }\n  };\n\n  var handleEntering = function handleEntering(node) {\n    var easing = (style === null || style === void 0 ? void 0 : style.transitionTimingFunction) || defaultEasing.easeOut;\n    var transitionProps = getTransitionProps({\n      timeout: timeout,\n      mode: 'enter',\n      style: _extends({}, style, {\n        transitionTimingFunction: easing\n      })\n    });\n    node.style.webkitTransition = createTransition('-webkit-transform', transitionProps);\n    node.style.transition = createTransition('transform', transitionProps);\n    node.style.webkitTransform = 'none';\n    node.style.transform = 'none';\n  };\n\n  var handleExit = function handleExit(node) {\n    var easing = (style === null || style === void 0 ? void 0 : style.transitionTimingFunction) || defaultEasing.sharp;\n    var transitionProps = getTransitionProps({\n      timeout: timeout,\n      mode: 'exit',\n      style: _extends({}, style, {\n        transitionTimingFunction: easing\n      })\n    });\n    node.style.webkitTransition = createTransition('-webkit-transform', transitionProps);\n    node.style.transition = createTransition('transform', transitionProps);\n    setTranslateValue(direction, node);\n\n    if (onExit) {\n      onExit(node);\n    }\n  };\n\n  var handleExited = function handleExited(node) {\n    // No need for transitions when the component is hidden\n    node.style.webkitTransition = '';\n    node.style.transition = '';\n\n    if (onExited) {\n      onExited(node);\n    }\n  };\n\n  var updatePosition = React.useCallback(function () {\n    if (nodeRef.current) {\n      setTranslateValue(direction, nodeRef.current);\n    }\n  }, [direction]);\n  React.useEffect(function () {\n    // Skip configuration where the position is screen size invariant.\n    if (inProp || direction === 'down' || direction === 'right') {\n      return undefined;\n    }\n\n    var handleResize = debounce(function () {\n      if (nodeRef.current) {\n        setTranslateValue(direction, nodeRef.current);\n      }\n    });\n    var containerWindow = ownerWindow(nodeRef.current);\n    containerWindow.addEventListener('resize', handleResize);\n    return function () {\n      handleResize.clear();\n      containerWindow.removeEventListener('resize', handleResize);\n    };\n  }, [direction, inProp]);\n  React.useEffect(function () {\n    if (!inProp) {\n      // We need to update the position of the drawer when the direction change and\n      // when it's hidden.\n      updatePosition();\n    }\n  }, [inProp, updatePosition]);\n  return React.createElement(Transition, Object.assign({\n    appear: true,\n    nodeRef: nodeRef,\n    onEnter: handleEnter,\n    onEntered: onEntered,\n    onEntering: handleEntering,\n    onExit: handleExit,\n    onExited: handleExited,\n    \"in\": inProp,\n    timeout: timeout\n  }, other), function (state, childProps) {\n    return React.cloneElement(children, _extends({\n      ref: handleRef,\n      style: _extends({\n        visibility: state === 'exited' && !inProp ? 'hidden' : undefined\n      }, style, {}, children.props.style)\n    }, childProps));\n  });\n});\nSlide.displayName = 'Slide';\n\nvar SvgIcon = function SvgIcon(props) {\n  return React__default.createElement(\"svg\", Object.assign({\n    viewBox: \"0 0 24 24\",\n    focusable: \"false\",\n    style: {\n      fontSize: 20,\n      marginInlineEnd: 8,\n      userSelect: 'none',\n      width: '1em',\n      height: '1em',\n      display: 'inline-block',\n      fill: 'currentColor',\n      flexShrink: 0\n    }\n  }, props));\n};\n\nvar CheckIcon = function CheckIcon() {\n  return React__default.createElement(SvgIcon, null, React__default.createElement(\"path\", {\n    d: \"M12 2C6.5 2 2 6.5 2 12S6.5 22 12 22 22 17.5 22 12 17.5 2 12 2M10 17L5 12L6.41\\n        10.59L10 14.17L17.59 6.58L19 8L10 17Z\"\n  }));\n};\n\nvar WarningIcon = function WarningIcon() {\n  return React__default.createElement(SvgIcon, null, React__default.createElement(\"path\", {\n    d: \"M13,14H11V10H13M13,18H11V16H13M1,21H23L12,2L1,21Z\"\n  }));\n};\n\nvar ErrorIcon = function ErrorIcon() {\n  return React__default.createElement(SvgIcon, null, React__default.createElement(\"path\", {\n    d: \"M12,2C17.53,2 22,6.47 22,12C22,17.53 17.53,22 12,22C6.47,22 2,17.53 2,12C2,\\n        6.47 6.47,2 12,2M15.59,7L12,10.59L8.41,7L7,8.41L10.59,12L7,15.59L8.41,17L12,\\n        13.41L15.59,17L17,15.59L13.41,12L17,8.41L15.59,7Z\"\n  }));\n};\n\nvar InfoIcon = function InfoIcon() {\n  return React__default.createElement(SvgIcon, null, React__default.createElement(\"path\", {\n    d: \"M13,9H11V7H13M13,17H11V11H13M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,\\n        0 22,12A10,10 0 0,0 12,2Z\"\n  }));\n};\n\nvar defaultIconVariants = {\n  \"default\": undefined,\n  success: /*#__PURE__*/React__default.createElement(CheckIcon, null),\n  warning: /*#__PURE__*/React__default.createElement(WarningIcon, null),\n  error: /*#__PURE__*/React__default.createElement(ErrorIcon, null),\n  info: /*#__PURE__*/React__default.createElement(InfoIcon, null)\n};\n\nvar defaults = {\n  maxSnack: 3,\n  persist: false,\n  hideIconVariant: false,\n  disableWindowBlurListener: false,\n  variant: 'default',\n  autoHideDuration: 5000,\n  iconVariant: defaultIconVariants,\n  anchorOrigin: {\n    vertical: 'bottom',\n    horizontal: 'left'\n  },\n  TransitionComponent: Slide,\n  transitionDuration: {\n    enter: 225,\n    exit: 195\n  }\n};\n/**\r\n * Derives the right autoHideDuration taking into account the following\r\n * prority order: 1: Options, 2: Props, 3: default fallback\r\n */\n\nvar getAutoHideDuration = function getAutoHideDuration(optionsDuration, propsDuration) {\n  var isNumberOrNull = function isNumberOrNull(numberish) {\n    return typeof numberish === 'number' || numberish === null;\n  };\n\n  if (isNumberOrNull(optionsDuration)) return optionsDuration;\n  if (isNumberOrNull(propsDuration)) return propsDuration;\n  return defaults.autoHideDuration;\n};\n/**\r\n * Derives the right transitionDuration taking into account the following\r\n * prority order: 1: Options, 2: Props, 3: default fallback\r\n */\n\n\nvar getTransitionDuration = function getTransitionDuration(optionsDuration, propsDuration) {\n  var is = function is(item, types) {\n    return types.some(function (t) {\n      return typeof item === t;\n    });\n  };\n\n  if (is(optionsDuration, ['string', 'number'])) {\n    return optionsDuration;\n  }\n\n  if (is(optionsDuration, ['object'])) {\n    return _extends({}, defaults.transitionDuration, {}, is(propsDuration, ['object']) && propsDuration, {}, optionsDuration);\n  }\n\n  if (is(propsDuration, ['string', 'number'])) {\n    return propsDuration;\n  }\n\n  if (is(propsDuration, ['object'])) {\n    return _extends({}, defaults.transitionDuration, {}, propsDuration);\n  }\n\n  return defaults.transitionDuration;\n};\n\nvar merge = function merge(options, props) {\n  return function (name, shouldObjectMerge) {\n    if (shouldObjectMerge === void 0) {\n      shouldObjectMerge = false;\n    }\n\n    if (shouldObjectMerge) {\n      return _extends({}, defaults[name], {}, props[name], {}, options[name]);\n    }\n\n    if (name === 'autoHideDuration') {\n      return getAutoHideDuration(options.autoHideDuration, props.autoHideDuration);\n    }\n\n    if (name === 'transitionDuration') {\n      return getTransitionDuration(options.transitionDuration, props.transitionDuration);\n    }\n\n    return options[name] || props[name] || defaults[name];\n  };\n};\n\nfunction makeStyles(styles) {\n  return Object.entries(styles).reduce(function (acc, _ref) {\n    var _extends2;\n\n    var key = _ref[0],\n        value = _ref[1];\n    return _extends({}, acc, (_extends2 = {}, _extends2[key] = goober.css(value), _extends2));\n  }, {});\n}\nvar ComponentClasses = {\n  SnackbarContainer: 'notistack-SnackbarContainer',\n  Snackbar: 'notistack-Snackbar',\n  CollapseWrapper: 'notistack-CollapseWrapper',\n  MuiContent: 'notistack-MuiContent',\n  MuiContentVariant: function MuiContentVariant(variant) {\n    return \"notistack-MuiContent-\" + variant;\n  }\n};\n\nvar classes = /*#__PURE__*/makeStyles({\n  root: {\n    height: 0\n  },\n  entered: {\n    height: 'auto'\n  }\n});\nvar collapsedSize = '0px';\nvar timeout = 175;\nvar Collapse = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var children = props.children,\n      inProp = props[\"in\"],\n      onExited = props.onExited;\n  var wrapperRef = React.useRef(null);\n  var nodeRef = React.useRef(null);\n  var handleRef = useForkRef(ref, nodeRef);\n\n  var getWrapperSize = function getWrapperSize() {\n    return wrapperRef.current ? wrapperRef.current.clientHeight : 0;\n  };\n\n  var handleEnter = function handleEnter(node) {\n    node.style.height = collapsedSize;\n  };\n\n  var handleEntering = function handleEntering(node) {\n    var wrapperSize = getWrapperSize();\n\n    var _getTransitionProps = getTransitionProps({\n      timeout: timeout,\n      mode: 'enter'\n    }),\n        transitionDuration = _getTransitionProps.duration,\n        easing = _getTransitionProps.easing;\n\n    node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : transitionDuration + \"ms\";\n    node.style.height = wrapperSize + \"px\";\n    node.style.transitionTimingFunction = easing || '';\n  };\n\n  var handleEntered = function handleEntered(node) {\n    node.style.height = 'auto';\n  };\n\n  var handleExit = function handleExit(node) {\n    node.style.height = getWrapperSize() + \"px\";\n  };\n\n  var handleExiting = function handleExiting(node) {\n    reflow(node);\n\n    var _getTransitionProps2 = getTransitionProps({\n      timeout: timeout,\n      mode: 'exit'\n    }),\n        transitionDuration = _getTransitionProps2.duration,\n        easing = _getTransitionProps2.easing;\n\n    node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : transitionDuration + \"ms\";\n    node.style.height = collapsedSize;\n    node.style.transitionTimingFunction = easing || '';\n  };\n\n  return React.createElement(Transition, {\n    \"in\": inProp,\n    unmountOnExit: true,\n    onEnter: handleEnter,\n    onEntered: handleEntered,\n    onEntering: handleEntering,\n    onExit: handleExit,\n    onExited: onExited,\n    onExiting: handleExiting,\n    nodeRef: nodeRef,\n    timeout: timeout\n  }, function (state, childProps) {\n    return React.createElement(\"div\", Object.assign({\n      ref: handleRef,\n      className: clsx(classes.root, state === 'entered' && classes.entered),\n      style: _extends({\n        pointerEvents: 'all',\n        overflow: 'hidden',\n        minHeight: collapsedSize,\n        transition: createTransition('height')\n      }, state === 'entered' && {\n        overflow: 'visible'\n      }, {}, state === 'exited' && !inProp && {\n        visibility: 'hidden'\n      })\n    }, childProps), React.createElement(\"div\", {\n      ref: wrapperRef,\n      className: ComponentClasses.CollapseWrapper,\n      // Hack to get children with a negative margin to not falsify the height computation.\n      style: {\n        display: 'flex',\n        width: '100%'\n      }\n    }, children));\n  });\n});\nCollapse.displayName = 'Collapse';\n\nvar direction = {\n  right: 'left',\n  left: 'right',\n  bottom: 'up',\n  top: 'down'\n};\nvar getSlideDirection = function getSlideDirection(anchorOrigin) {\n  if (anchorOrigin.horizontal !== 'center') {\n    return direction[anchorOrigin.horizontal];\n  }\n\n  return direction[anchorOrigin.vertical];\n};\n/** Tranforms classes name */\n\nvar toSnackbarAnchorOrigin = function toSnackbarAnchorOrigin(anchorOrigin) {\n  return \"anchorOrigin\" + originKeyExtractor(anchorOrigin);\n};\n/**\r\n * Omit SnackbarContainer class keys that are not needed for SnackbarItem\r\n */\n\nvar keepSnackbarClassKeys = function keepSnackbarClassKeys(classes) {\n  if (classes === void 0) {\n    classes = {};\n  }\n\n  var containerClasses = {\n    containerRoot: true,\n    containerAnchorOriginTopCenter: true,\n    containerAnchorOriginBottomCenter: true,\n    containerAnchorOriginTopRight: true,\n    containerAnchorOriginBottomRight: true,\n    containerAnchorOriginTopLeft: true,\n    containerAnchorOriginBottomLeft: true\n  };\n  return Object.keys(classes).filter(function (key) {\n    return !containerClasses[key];\n  }).reduce(function (obj, key) {\n    var _extends2;\n\n    return _extends({}, obj, (_extends2 = {}, _extends2[key] = classes[key], _extends2));\n  }, {});\n};\n\nvar noOp$1 = function noOp() {\n  /* */\n};\n/**\r\n * Credit to MUI team @ https://mui.com\r\n * Safe chained function.\r\n *\r\n * Will only create a new function if needed,\r\n * otherwise will pass back existing functions or null.\r\n */\n\n\nfunction createChainedFunction(funcs, snackbarId) {\n  // @ts-ignore\n  return funcs.reduce(function (acc, func) {\n    if (func === null || func === undefined) {\n      return acc;\n    }\n\n    return function chainedFunction() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var argums = [].concat(args);\n\n      if (snackbarId && argums.indexOf(snackbarId) === -1) {\n        argums.push(snackbarId);\n      } // @ts-ignore\n\n\n      acc.apply(this, argums);\n      func.apply(this, argums);\n    };\n  }, noOp$1);\n}\n\n/**\r\n * Credit to MUI team @ https://mui.com\r\n * https://github.com/facebook/react/issues/14099#issuecomment-440013892\r\n */\nvar useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\nfunction useEventCallback(fn) {\n  var ref = React.useRef(fn);\n  useEnhancedEffect(function () {\n    ref.current = fn;\n  });\n  return React.useCallback(function () {\n    return (// @ts-expect-error hide `this`\n      (ref.current).apply(void 0, arguments)\n    );\n  }, []);\n}\n\n/**\r\n * Credit to MUI team @ https://mui.com\r\n */\nvar Snackbar = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var children = props.children,\n      className = props.className,\n      autoHideDuration = props.autoHideDuration,\n      _props$disableWindowB = props.disableWindowBlurListener,\n      disableWindowBlurListener = _props$disableWindowB === void 0 ? false : _props$disableWindowB,\n      onClose = props.onClose,\n      id = props.id,\n      open = props.open,\n      _props$SnackbarProps = props.SnackbarProps,\n      SnackbarProps = _props$SnackbarProps === void 0 ? {} : _props$SnackbarProps;\n  var timerAutoHide = React.useRef();\n  var handleClose = useEventCallback(function () {\n    if (onClose) {\n      onClose.apply(void 0, arguments);\n    }\n  });\n  var setAutoHideTimer = useEventCallback(function (autoHideDurationParam) {\n    if (!onClose || autoHideDurationParam == null) {\n      return;\n    }\n\n    if (timerAutoHide.current) {\n      clearTimeout(timerAutoHide.current);\n    }\n\n    timerAutoHide.current = setTimeout(function () {\n      handleClose(null, 'timeout', id);\n    }, autoHideDurationParam);\n  });\n  React.useEffect(function () {\n    if (open) {\n      setAutoHideTimer(autoHideDuration);\n    }\n\n    return function () {\n      if (timerAutoHide.current) {\n        clearTimeout(timerAutoHide.current);\n      }\n    };\n  }, [open, autoHideDuration, setAutoHideTimer]);\n  /**\r\n   * Pause the timer when the user is interacting with the Snackbar\r\n   * or when the user hide the window.\r\n   */\n\n  var handlePause = function handlePause() {\n    if (timerAutoHide.current) {\n      clearTimeout(timerAutoHide.current);\n    }\n  };\n  /**\r\n   * Restart the timer when the user is no longer interacting with the Snackbar\r\n   * or when the window is shown back.\r\n   */\n\n\n  var handleResume = React.useCallback(function () {\n    if (autoHideDuration != null) {\n      setAutoHideTimer(autoHideDuration * 0.5);\n    }\n  }, [autoHideDuration, setAutoHideTimer]);\n\n  var handleMouseEnter = function handleMouseEnter(event) {\n    if (SnackbarProps.onMouseEnter) {\n      SnackbarProps.onMouseEnter(event);\n    }\n\n    handlePause();\n  };\n\n  var handleMouseLeave = function handleMouseLeave(event) {\n    if (SnackbarProps.onMouseLeave) {\n      SnackbarProps.onMouseLeave(event);\n    }\n\n    handleResume();\n  };\n\n  React.useEffect(function () {\n    if (!disableWindowBlurListener && open) {\n      window.addEventListener('focus', handleResume);\n      window.addEventListener('blur', handlePause);\n      return function () {\n        window.removeEventListener('focus', handleResume);\n        window.removeEventListener('blur', handlePause);\n      };\n    }\n\n    return undefined;\n  }, [disableWindowBlurListener, handleResume, open]);\n  return React.createElement(\"div\", Object.assign({\n    ref: ref\n  }, SnackbarProps, {\n    className: clsx(ComponentClasses.Snackbar, className),\n    onMouseEnter: handleMouseEnter,\n    onMouseLeave: handleMouseLeave\n  }), children);\n});\nSnackbar.displayName = 'Snackbar';\n\nvar _root;\nvar classes$1 = /*#__PURE__*/makeStyles({\n  root: (_root = {\n    display: 'flex',\n    flexWrap: 'wrap',\n    flexGrow: 1\n  }, _root[breakpoints.upSm] = {\n    flexGrow: 'initial',\n    minWidth: '288px'\n  }, _root)\n});\nvar SnackbarContent = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var className = _ref.className,\n      props = _objectWithoutPropertiesLoose(_ref, [\"className\"]);\n\n  return React__default.createElement(\"div\", Object.assign({\n    ref: ref,\n    className: clsx(classes$1.root, className)\n  }, props));\n});\nSnackbarContent.displayName = 'SnackbarContent';\n\nvar classes$2 = /*#__PURE__*/makeStyles({\n  root: {\n    backgroundColor: '#313131',\n    fontSize: '0.875rem',\n    lineHeight: 1.43,\n    letterSpacing: '0.01071em',\n    color: '#fff',\n    alignItems: 'center',\n    padding: '6px 16px',\n    borderRadius: '4px',\n    boxShadow: '0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)'\n  },\n  lessPadding: {\n    paddingLeft: 8 * 2.5 + \"px\"\n  },\n  \"default\": {\n    backgroundColor: '#313131'\n  },\n  success: {\n    backgroundColor: '#43a047'\n  },\n  error: {\n    backgroundColor: '#d32f2f'\n  },\n  warning: {\n    backgroundColor: '#ff9800'\n  },\n  info: {\n    backgroundColor: '#2196f3'\n  },\n  message: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: '8px 0'\n  },\n  action: {\n    display: 'flex',\n    alignItems: 'center',\n    marginLeft: 'auto',\n    paddingLeft: '16px',\n    marginRight: '-8px'\n  }\n});\nvar ariaDescribedby = 'notistack-snackbar';\nvar MaterialDesignContent = /*#__PURE__*/React.forwardRef(function (props, forwardedRef) {\n  var id = props.id,\n      message = props.message,\n      componentOrFunctionAction = props.action,\n      iconVariant = props.iconVariant,\n      variant = props.variant,\n      hideIconVariant = props.hideIconVariant,\n      style = props.style,\n      className = props.className;\n  var icon = iconVariant[variant];\n  var action = componentOrFunctionAction;\n\n  if (typeof action === 'function') {\n    action = action(id);\n  }\n\n  return React__default.createElement(SnackbarContent, {\n    ref: forwardedRef,\n    role: \"alert\",\n    \"aria-describedby\": ariaDescribedby,\n    style: style,\n    className: clsx(ComponentClasses.MuiContent, ComponentClasses.MuiContentVariant(variant), classes$2.root, classes$2[variant], className, !hideIconVariant && icon && classes$2.lessPadding)\n  }, React__default.createElement(\"div\", {\n    id: ariaDescribedby,\n    className: classes$2.message\n  }, !hideIconVariant ? icon : null, message), action && React__default.createElement(\"div\", {\n    className: classes$2.action\n  }, action));\n});\nMaterialDesignContent.displayName = 'MaterialDesignContent';\nvar MaterialDesignContent$1 = /*#__PURE__*/React.memo(MaterialDesignContent);\n\nvar styles = /*#__PURE__*/makeStyles({\n  wrappedRoot: {\n    width: '100%',\n    position: 'relative',\n    transform: 'translateX(0)',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    minWidth: '288px'\n  }\n});\n\nvar SnackbarItem = function SnackbarItem(props) {\n  var timeout = React.useRef();\n\n  var _useState = React.useState(true),\n      collapsed = _useState[0],\n      setCollapsed = _useState[1];\n\n  var handleClose = createChainedFunction([props.snack.onClose, props.onClose]);\n\n  var handleEntered = function handleEntered() {\n    if (props.snack.requestClose) {\n      handleClose(null, 'instructed', props.snack.id);\n    }\n  };\n\n  var handleExitedScreen = React.useCallback(function () {\n    timeout.current = setTimeout(function () {\n      setCollapsed(function (col) {\n        return !col;\n      });\n    }, 125);\n  }, []);\n  React.useEffect(function () {\n    return function () {\n      if (timeout.current) {\n        clearTimeout(timeout.current);\n      }\n    };\n  }, []);\n  var snack = props.snack,\n      allClasses = props.classes,\n      _props$Component = props.Component,\n      Component = _props$Component === void 0 ? MaterialDesignContent$1 : _props$Component;\n  var classes = React.useMemo(function () {\n    return keepSnackbarClassKeys(allClasses);\n  }, [allClasses]);\n\n  var open = snack.open,\n      SnackbarProps = snack.SnackbarProps,\n      TransitionComponent = snack.TransitionComponent,\n      TransitionProps = snack.TransitionProps,\n      transitionDuration = snack.transitionDuration,\n      disableWindowBlurListener = snack.disableWindowBlurListener,\n      componentOrFunctionContent = snack.content,\n      otherSnack = _objectWithoutPropertiesLoose(snack, [\"open\", \"SnackbarProps\", \"TransitionComponent\", \"TransitionProps\", \"transitionDuration\", \"disableWindowBlurListener\", \"content\", \"entered\", \"requestClose\", \"onEnter\", \"onEntered\", \"onExit\", \"onExited\"]);\n\n  var transitionProps = _extends({\n    direction: getSlideDirection(otherSnack.anchorOrigin),\n    timeout: transitionDuration\n  }, TransitionProps);\n\n  var content = componentOrFunctionContent;\n\n  if (typeof content === 'function') {\n    content = content(otherSnack.id, otherSnack.message);\n  }\n\n  var callbacks = ['onEnter', 'onEntered', 'onExit', 'onExited'].reduce(function (acc, cbName) {\n    var _extends2;\n\n    return _extends({}, acc, (_extends2 = {}, _extends2[cbName] = createChainedFunction([props.snack[cbName], props[cbName]], otherSnack.id), _extends2));\n  }, {});\n  return React__default.createElement(Collapse, {\n    \"in\": collapsed,\n    onExited: callbacks.onExited\n  }, React__default.createElement(Snackbar, {\n    open: open,\n    id: otherSnack.id,\n    disableWindowBlurListener: disableWindowBlurListener,\n    autoHideDuration: otherSnack.autoHideDuration,\n    className: clsx(styles.wrappedRoot, classes.root, classes[toSnackbarAnchorOrigin(otherSnack.anchorOrigin)]),\n    SnackbarProps: SnackbarProps,\n    onClose: handleClose\n  }, React__default.createElement(TransitionComponent, Object.assign({}, transitionProps, {\n    appear: true,\n    \"in\": open,\n    onExit: callbacks.onExit,\n    onExited: handleExitedScreen,\n    onEnter: callbacks.onEnter,\n    // order matters. first callbacks.onEntered to set entered: true,\n    // then handleEntered to check if there's a request for closing\n    onEntered: createChainedFunction([callbacks.onEntered, handleEntered], otherSnack.id)\n  }), content || React__default.createElement(Component, Object.assign({}, otherSnack)))));\n};\n\nvar _root$1, _rootDense, _left, _right, _center;\nvar indents = {\n  view: {\n    \"default\": 20,\n    dense: 4\n  },\n  snackbar: {\n    \"default\": 6,\n    dense: 2\n  }\n};\nvar collapseWrapper = \".\" + ComponentClasses.CollapseWrapper;\nvar xsWidthMargin = 16;\nvar styles$1 = /*#__PURE__*/makeStyles({\n  root: (_root$1 = {\n    boxSizing: 'border-box',\n    display: 'flex',\n    maxHeight: '100%',\n    position: 'fixed',\n    zIndex: 1400,\n    height: 'auto',\n    width: 'auto',\n    transition: /*#__PURE__*/createTransition(['top', 'right', 'bottom', 'left', 'max-width'], {\n      duration: 300,\n      easing: 'ease'\n    }),\n    // container itself is invisible and should not block clicks, clicks should be passed to its children\n    // a pointerEvents: all is applied in the collapse component\n    pointerEvents: 'none'\n  }, _root$1[collapseWrapper] = {\n    padding: indents.snackbar[\"default\"] + \"px 0px\",\n    transition: 'padding 300ms ease 0ms'\n  }, _root$1.maxWidth = \"calc(100% - \" + indents.view[\"default\"] * 2 + \"px)\", _root$1[breakpoints.downXs] = {\n    width: '100%',\n    maxWidth: \"calc(100% - \" + xsWidthMargin * 2 + \"px)\"\n  }, _root$1),\n  rootDense: (_rootDense = {}, _rootDense[collapseWrapper] = {\n    padding: indents.snackbar.dense + \"px 0px\"\n  }, _rootDense),\n  top: {\n    top: indents.view[\"default\"] - indents.snackbar[\"default\"] + \"px\",\n    flexDirection: 'column'\n  },\n  bottom: {\n    bottom: indents.view[\"default\"] - indents.snackbar[\"default\"] + \"px\",\n    flexDirection: 'column-reverse'\n  },\n  left: (_left = {\n    left: indents.view[\"default\"] + \"px\"\n  }, _left[breakpoints.upSm] = {\n    alignItems: 'flex-start'\n  }, _left[breakpoints.downXs] = {\n    left: xsWidthMargin + \"px\"\n  }, _left),\n  right: (_right = {\n    right: indents.view[\"default\"] + \"px\"\n  }, _right[breakpoints.upSm] = {\n    alignItems: 'flex-end'\n  }, _right[breakpoints.downXs] = {\n    right: xsWidthMargin + \"px\"\n  }, _right),\n  center: (_center = {\n    left: '50%',\n    transform: 'translateX(-50%)'\n  }, _center[breakpoints.upSm] = {\n    alignItems: 'center'\n  }, _center)\n});\n\nvar SnackbarContainer = function SnackbarContainer(props) {\n  var _props$classes = props.classes,\n      classes = _props$classes === void 0 ? {} : _props$classes,\n      anchorOrigin = props.anchorOrigin,\n      dense = props.dense,\n      children = props.children;\n  var combinedClassname = clsx(ComponentClasses.SnackbarContainer, styles$1[anchorOrigin.vertical], styles$1[anchorOrigin.horizontal], styles$1.root, // root should come after others to override maxWidth\n  classes.containerRoot, classes[\"containerAnchorOrigin\" + originKeyExtractor(anchorOrigin)], dense && styles$1.rootDense);\n  return React__default.createElement(\"div\", {\n    className: combinedClassname\n  }, children);\n};\n\nvar SnackbarContainer$1 = /*#__PURE__*/React.memo(SnackbarContainer);\n\n/* eslint-disable */\n\nvar messages = {\n  NO_PERSIST_ALL: \"Reached maxSnack while all enqueued snackbars have 'persist' flag. Notistack will dismiss the oldest snackbar anyway to allow other ones in the queue to be presented.\"\n};\nvar warning = (function (messageKey) {\n  var message = messages[messageKey];\n\n  if (typeof console !== 'undefined') {\n    console.error(\"WARNING - notistack: \" + message);\n  }\n\n  try {\n    throw new Error(message);\n  } catch (x) {}\n});\n\nvar isOptions = function isOptions(messageOrOptions) {\n  var isMessage = typeof messageOrOptions === 'string' || React.isValidElement(messageOrOptions);\n  return !isMessage;\n};\n\nvar SnackbarProvider = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(SnackbarProvider, _Component);\n\n  function SnackbarProvider(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    /**\r\n     * Adds a new snackbar to the queue to be presented.\r\n     * Returns generated or user defined key referencing the new snackbar or null\r\n     */\n\n    _this.enqueueSnackbar = function (messageOrOptions, optsOrUndefined) {\n      if (optsOrUndefined === void 0) {\n        optsOrUndefined = {};\n      }\n\n      if (messageOrOptions === undefined || messageOrOptions === null) {\n        throw new Error('enqueueSnackbar called with invalid argument');\n      }\n\n      var opts = isOptions(messageOrOptions) ? messageOrOptions : optsOrUndefined;\n      var message = isOptions(messageOrOptions) ? messageOrOptions.message : messageOrOptions;\n\n      var key = opts.key,\n          preventDuplicate = opts.preventDuplicate,\n          options = _objectWithoutPropertiesLoose(opts, [\"key\", \"preventDuplicate\"]);\n\n      var hasSpecifiedKey = isDefined(key);\n      var id = hasSpecifiedKey ? key : new Date().getTime() + Math.random();\n      var merger = merge(options, _this.props);\n\n      var snack = _extends({\n        id: id\n      }, options, {\n        message: message,\n        open: true,\n        entered: false,\n        requestClose: false,\n        persist: merger('persist'),\n        action: merger('action'),\n        content: merger('content'),\n        variant: merger('variant'),\n        anchorOrigin: merger('anchorOrigin'),\n        disableWindowBlurListener: merger('disableWindowBlurListener'),\n        autoHideDuration: merger('autoHideDuration'),\n        hideIconVariant: merger('hideIconVariant'),\n        TransitionComponent: merger('TransitionComponent'),\n        transitionDuration: merger('transitionDuration'),\n        TransitionProps: merger('TransitionProps', true),\n        iconVariant: merger('iconVariant', true),\n        style: merger('style', true),\n        SnackbarProps: merger('SnackbarProps', true),\n        className: clsx(_this.props.className, options.className)\n      });\n\n      if (snack.persist) {\n        snack.autoHideDuration = undefined;\n      }\n\n      _this.setState(function (state) {\n        if (preventDuplicate === undefined && _this.props.preventDuplicate || preventDuplicate) {\n          var compareFunction = function compareFunction(item) {\n            return hasSpecifiedKey ? item.id === id : item.message === message;\n          };\n\n          var inQueue = state.queue.findIndex(compareFunction) > -1;\n          var inView = state.snacks.findIndex(compareFunction) > -1;\n\n          if (inQueue || inView) {\n            return state;\n          }\n        }\n\n        return _this.handleDisplaySnack(_extends({}, state, {\n          queue: [].concat(state.queue, [snack])\n        }));\n      });\n\n      return id;\n    };\n    /**\r\n     * Reducer: Display snack if there's space for it. Otherwise, immediately\r\n     * begin dismissing the oldest message to start showing the new one.\r\n     */\n\n\n    _this.handleDisplaySnack = function (state) {\n      var snacks = state.snacks;\n\n      if (snacks.length >= _this.maxSnack) {\n        return _this.handleDismissOldest(state);\n      }\n\n      return _this.processQueue(state);\n    };\n    /**\r\n     * Reducer: Display items (notifications) in the queue if there's space for them.\r\n     */\n\n\n    _this.processQueue = function (state) {\n      var queue = state.queue,\n          snacks = state.snacks;\n\n      if (queue.length > 0) {\n        return _extends({}, state, {\n          snacks: [].concat(snacks, [queue[0]]),\n          queue: queue.slice(1, queue.length)\n        });\n      }\n\n      return state;\n    };\n    /**\r\n     * Reducer: Hide oldest snackbar on the screen because there exists a new one which we have to display.\r\n     * (ignoring the one with 'persist' flag. i.e. explicitly told by user not to get dismissed).\r\n     *\r\n     * Note 1: If there is already a message leaving the screen, no new messages are dismissed.\r\n     * Note 2: If the oldest message has not yet entered the screen, only a request to close the\r\n     *         snackbar is made. Once it entered the screen, it will be immediately dismissed.\r\n     */\n\n\n    _this.handleDismissOldest = function (state) {\n      if (state.snacks.some(function (item) {\n        return !item.open || item.requestClose;\n      })) {\n        return state;\n      }\n\n      var popped = false;\n      var ignore = false;\n      var persistentCount = state.snacks.reduce(function (acc, current) {\n        return acc + (current.open && current.persist ? 1 : 0);\n      }, 0);\n\n      if (persistentCount === _this.maxSnack) {\n         warning('NO_PERSIST_ALL') ;\n        ignore = true;\n      }\n\n      var snacks = state.snacks.map(function (item) {\n        if (!popped && (!item.persist || ignore)) {\n          popped = true;\n\n          if (!item.entered) {\n            return _extends({}, item, {\n              requestClose: true\n            });\n          }\n\n          if (item.onClose) {\n            item.onClose(null, 'maxsnack', item.id);\n          }\n\n          if (_this.props.onClose) {\n            _this.props.onClose(null, 'maxsnack', item.id);\n          }\n\n          return _extends({}, item, {\n            open: false\n          });\n        }\n\n        return _extends({}, item);\n      });\n      return _extends({}, state, {\n        snacks: snacks\n      });\n    };\n    /**\r\n     * Set the entered state of the snackbar with the given key.\r\n     */\n\n\n    _this.handleEnteredSnack = function (node, isAppearing, key) {\n      if (!isDefined(key)) {\n        throw new Error('handleEnteredSnack Cannot be called with undefined key');\n      }\n\n      _this.setState(function (_ref) {\n        var snacks = _ref.snacks;\n        return {\n          snacks: snacks.map(function (item) {\n            return item.id === key ? _extends({}, item, {\n              entered: true\n            }) : _extends({}, item);\n          })\n        };\n      });\n    };\n    /**\r\n     * Hide a snackbar after its timeout.\r\n     */\n\n\n    _this.handleCloseSnack = function (event, reason, key) {\n      // should not use createChainedFunction for onClose.\n      // because this.closeSnackbar called this function\n      if (_this.props.onClose) {\n        _this.props.onClose(event, reason, key);\n      }\n\n      var shouldCloseAll = key === undefined;\n\n      _this.setState(function (_ref2) {\n        var snacks = _ref2.snacks,\n            queue = _ref2.queue;\n        return {\n          snacks: snacks.map(function (item) {\n            if (!shouldCloseAll && item.id !== key) {\n              return _extends({}, item);\n            }\n\n            return item.entered ? _extends({}, item, {\n              open: false\n            }) : _extends({}, item, {\n              requestClose: true\n            });\n          }),\n          queue: queue.filter(function (item) {\n            return item.id !== key;\n          })\n        };\n      });\n    };\n    /**\r\n     * Close snackbar with the given key\r\n     */\n\n\n    _this.closeSnackbar = function (key) {\n      // call individual snackbar onClose callback passed through options parameter\n      var toBeClosed = _this.state.snacks.find(function (item) {\n        return item.id === key;\n      });\n\n      if (isDefined(key) && toBeClosed && toBeClosed.onClose) {\n        toBeClosed.onClose(null, 'instructed', key);\n      }\n\n      _this.handleCloseSnack(null, 'instructed', key);\n    };\n    /**\r\n     * When we set open attribute of a snackbar to false (i.e. after we hide a snackbar),\r\n     * it leaves the screen and immediately after leaving animation is done, this method\r\n     * gets called. We remove the hidden snackbar from state and then display notifications\r\n     * waiting in the queue (if any). If after this process the queue is not empty, the\r\n     * oldest message is dismissed.\r\n     */\n\n\n    _this.handleExitedSnack = function (node, key) {\n      if (!isDefined(key)) {\n        throw new Error('handleExitedSnack Cannot be called with undefined key');\n      }\n\n      _this.setState(function (state) {\n        var newState = _this.processQueue(_extends({}, state, {\n          snacks: state.snacks.filter(function (item) {\n            return item.id !== key;\n          })\n        }));\n\n        if (newState.queue.length === 0) {\n          return newState;\n        }\n\n        return _this.handleDismissOldest(newState);\n      });\n    };\n\n    exports.enqueueSnackbar = _this.enqueueSnackbar;\n    exports.closeSnackbar = _this.closeSnackbar;\n    _this.state = {\n      snacks: [],\n      queue: [],\n      contextValue: {\n        enqueueSnackbar: _this.enqueueSnackbar.bind(_assertThisInitialized(_this)),\n        closeSnackbar: _this.closeSnackbar.bind(_assertThisInitialized(_this))\n      }\n    };\n    return _this;\n  }\n\n  var _proto = SnackbarProvider.prototype;\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var contextValue = this.state.contextValue;\n    var _this$props = this.props,\n        domRoot = _this$props.domRoot,\n        children = _this$props.children,\n        _this$props$dense = _this$props.dense,\n        dense = _this$props$dense === void 0 ? false : _this$props$dense,\n        _this$props$Component = _this$props.Components,\n        Components = _this$props$Component === void 0 ? {} : _this$props$Component,\n        classes = _this$props.classes;\n    var categ = this.state.snacks.reduce(function (acc, current) {\n      var _extends2;\n\n      var category = originKeyExtractor(current.anchorOrigin);\n      var existingOfCategory = acc[category] || [];\n      return _extends({}, acc, (_extends2 = {}, _extends2[category] = [].concat(existingOfCategory, [current]), _extends2));\n    }, {});\n    var snackbars = Object.keys(categ).map(function (origin) {\n      var snacks = categ[origin];\n      var nomineeSnack = snacks[0];\n      return React__default.createElement(SnackbarContainer$1, {\n        key: origin,\n        dense: dense,\n        anchorOrigin: nomineeSnack.anchorOrigin,\n        classes: classes\n      }, snacks.map(function (snack) {\n        return React__default.createElement(SnackbarItem, {\n          key: snack.id,\n          snack: snack,\n          classes: classes,\n          Component: Components[snack.variant],\n          onClose: _this2.handleCloseSnack,\n          onEnter: _this2.props.onEnter,\n          onExit: _this2.props.onExit,\n          onExited: createChainedFunction([_this2.handleExitedSnack, _this2.props.onExited], snack.id),\n          onEntered: createChainedFunction([_this2.handleEnteredSnack, _this2.props.onEntered], snack.id)\n        });\n      }));\n    });\n    return React__default.createElement(SnackbarContext.Provider, {\n      value: contextValue\n    }, children, domRoot ? reactDom.createPortal(snackbars, domRoot) : snackbars);\n  };\n\n  _createClass(SnackbarProvider, [{\n    key: \"maxSnack\",\n    get: function get() {\n      return this.props.maxSnack || defaults.maxSnack;\n    }\n  }]);\n\n  return SnackbarProvider;\n}(React.Component);\n\nvar useSnackbar = (function () {\n  return React.useContext(SnackbarContext);\n});\n\nexports.MaterialDesignContent = MaterialDesignContent$1;\nexports.SnackbarContent = SnackbarContent;\nexports.SnackbarProvider = SnackbarProvider;\nexports.Transition = Transition;\nexports.useSnackbar = useSnackbar;\n//# sourceMappingURL=notistack.cjs.development.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/notistack/notistack.cjs.development.js\n");

/***/ })

};
;