"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["react-syntax-highlighter_languages_refractor_http"],{

/***/ "(app-pages-browser)/./node_modules/refractor/lang/http.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/http.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n\nmodule.exports = http\nhttp.displayName = 'http'\nhttp.aliases = []\nfunction http(Prism) {\n  ;(function(Prism) {\n    Prism.languages.http = {\n      'request-line': {\n        pattern: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\s(?:https?:\\/\\/|\\/)\\S+\\sHTTP\\/[0-9.]+/m,\n        inside: {\n          // HTTP Verb\n          property: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\b/,\n          // Path or query argument\n          'attr-name': /:\\w+/\n        }\n      },\n      'response-status': {\n        pattern: /^HTTP\\/1.[01] \\d+.*/m,\n        inside: {\n          // Status, e.g. 200 OK\n          property: {\n            pattern: /(^HTTP\\/1.[01] )\\d+.*/i,\n            lookbehind: true\n          }\n        }\n      },\n      // HTTP header name\n      'header-name': {\n        pattern: /^[\\w-]+:(?=.)/m,\n        alias: 'keyword'\n      }\n    } // Create a mapping of Content-Type headers to language definitions\n    var langs = Prism.languages\n    var httpLanguages = {\n      'application/javascript': langs.javascript,\n      'application/json': langs.json || langs.javascript,\n      'application/xml': langs.xml,\n      'text/xml': langs.xml,\n      'text/html': langs.html,\n      'text/css': langs.css\n    } // Declare which types can also be suffixes\n    var suffixTypes = {\n      'application/json': true,\n      'application/xml': true\n    }\n    /**\n     * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n     *\n     * @param {string} contentType\n     * @returns {string}\n     */\n    function getSuffixPattern(contentType) {\n      var suffix = contentType.replace(/^[a-z]+\\//, '')\n      var suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])'\n      return '(?:' + contentType + '|' + suffixPattern + ')'\n    } // Insert each content type parser that has its associated language\n    // currently loaded.\n    var options\n    for (var contentType in httpLanguages) {\n      if (httpLanguages[contentType]) {\n        options = options || {}\n        var pattern = suffixTypes[contentType]\n          ? getSuffixPattern(contentType)\n          : contentType\n        options[contentType] = {\n          pattern: RegExp(\n            '(content-type:\\\\s*' +\n              pattern +\n              '[\\\\s\\\\S]*?)(?:\\\\r?\\\\n|\\\\r){2}[\\\\s\\\\S]*',\n            'i'\n          ),\n          lookbehind: true,\n          inside: {\n            rest: httpLanguages[contentType]\n          }\n        }\n      }\n    }\n    if (options) {\n      Prism.languages.insertBefore('http', 'header-name', options)\n    }\n  })(Prism)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWZyYWN0b3IvbGFuZy9odHRwLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxFQUFFO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvaHR0cC5qcz83YTc2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGh0dHBcbmh0dHAuZGlzcGxheU5hbWUgPSAnaHR0cCdcbmh0dHAuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBodHRwKFByaXNtKSB7XG4gIDsoZnVuY3Rpb24oUHJpc20pIHtcbiAgICBQcmlzbS5sYW5ndWFnZXMuaHR0cCA9IHtcbiAgICAgICdyZXF1ZXN0LWxpbmUnOiB7XG4gICAgICAgIHBhdHRlcm46IC9eKD86UE9TVHxHRVR8UFVUfERFTEVURXxPUFRJT05TfFBBVENIfFRSQUNFfENPTk5FQ1QpXFxzKD86aHR0cHM/OlxcL1xcL3xcXC8pXFxTK1xcc0hUVFBcXC9bMC05Ll0rL20sXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIC8vIEhUVFAgVmVyYlxuICAgICAgICAgIHByb3BlcnR5OiAvXig/OlBPU1R8R0VUfFBVVHxERUxFVEV8T1BUSU9OU3xQQVRDSHxUUkFDRXxDT05ORUNUKVxcYi8sXG4gICAgICAgICAgLy8gUGF0aCBvciBxdWVyeSBhcmd1bWVudFxuICAgICAgICAgICdhdHRyLW5hbWUnOiAvOlxcdysvXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAncmVzcG9uc2Utc3RhdHVzJzoge1xuICAgICAgICBwYXR0ZXJuOiAvXkhUVFBcXC8xLlswMV0gXFxkKy4qL20sXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIC8vIFN0YXR1cywgZS5nLiAyMDAgT0tcbiAgICAgICAgICBwcm9wZXJ0eToge1xuICAgICAgICAgICAgcGF0dGVybjogLyheSFRUUFxcLzEuWzAxXSApXFxkKy4qL2ksXG4gICAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gSFRUUCBoZWFkZXIgbmFtZVxuICAgICAgJ2hlYWRlci1uYW1lJzoge1xuICAgICAgICBwYXR0ZXJuOiAvXltcXHctXSs6KD89LikvbSxcbiAgICAgICAgYWxpYXM6ICdrZXl3b3JkJ1xuICAgICAgfVxuICAgIH0gLy8gQ3JlYXRlIGEgbWFwcGluZyBvZiBDb250ZW50LVR5cGUgaGVhZGVycyB0byBsYW5ndWFnZSBkZWZpbml0aW9uc1xuICAgIHZhciBsYW5ncyA9IFByaXNtLmxhbmd1YWdlc1xuICAgIHZhciBodHRwTGFuZ3VhZ2VzID0ge1xuICAgICAgJ2FwcGxpY2F0aW9uL2phdmFzY3JpcHQnOiBsYW5ncy5qYXZhc2NyaXB0LFxuICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nOiBsYW5ncy5qc29uIHx8IGxhbmdzLmphdmFzY3JpcHQsXG4gICAgICAnYXBwbGljYXRpb24veG1sJzogbGFuZ3MueG1sLFxuICAgICAgJ3RleHQveG1sJzogbGFuZ3MueG1sLFxuICAgICAgJ3RleHQvaHRtbCc6IGxhbmdzLmh0bWwsXG4gICAgICAndGV4dC9jc3MnOiBsYW5ncy5jc3NcbiAgICB9IC8vIERlY2xhcmUgd2hpY2ggdHlwZXMgY2FuIGFsc28gYmUgc3VmZml4ZXNcbiAgICB2YXIgc3VmZml4VHlwZXMgPSB7XG4gICAgICAnYXBwbGljYXRpb24vanNvbic6IHRydWUsXG4gICAgICAnYXBwbGljYXRpb24veG1sJzogdHJ1ZVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgcGF0dGVybiBmb3IgdGhlIGdpdmVuIGNvbnRlbnQgdHlwZSB3aGljaCBtYXRjaGVzIGl0IGFuZCBhbnkgdHlwZSB3aGljaCBoYXMgaXQgYXMgYSBzdWZmaXguXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFR5cGVcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFN1ZmZpeFBhdHRlcm4oY29udGVudFR5cGUpIHtcbiAgICAgIHZhciBzdWZmaXggPSBjb250ZW50VHlwZS5yZXBsYWNlKC9eW2Etel0rXFwvLywgJycpXG4gICAgICB2YXIgc3VmZml4UGF0dGVybiA9ICdcXFxcdysvKD86W1xcXFx3Li1dK1xcXFwrKSsnICsgc3VmZml4ICsgJyg/IVsrXFxcXHcuLV0pJ1xuICAgICAgcmV0dXJuICcoPzonICsgY29udGVudFR5cGUgKyAnfCcgKyBzdWZmaXhQYXR0ZXJuICsgJyknXG4gICAgfSAvLyBJbnNlcnQgZWFjaCBjb250ZW50IHR5cGUgcGFyc2VyIHRoYXQgaGFzIGl0cyBhc3NvY2lhdGVkIGxhbmd1YWdlXG4gICAgLy8gY3VycmVudGx5IGxvYWRlZC5cbiAgICB2YXIgb3B0aW9uc1xuICAgIGZvciAodmFyIGNvbnRlbnRUeXBlIGluIGh0dHBMYW5ndWFnZXMpIHtcbiAgICAgIGlmIChodHRwTGFuZ3VhZ2VzW2NvbnRlbnRUeXBlXSkge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICAgICAgICB2YXIgcGF0dGVybiA9IHN1ZmZpeFR5cGVzW2NvbnRlbnRUeXBlXVxuICAgICAgICAgID8gZ2V0U3VmZml4UGF0dGVybihjb250ZW50VHlwZSlcbiAgICAgICAgICA6IGNvbnRlbnRUeXBlXG4gICAgICAgIG9wdGlvbnNbY29udGVudFR5cGVdID0ge1xuICAgICAgICAgIHBhdHRlcm46IFJlZ0V4cChcbiAgICAgICAgICAgICcoY29udGVudC10eXBlOlxcXFxzKicgK1xuICAgICAgICAgICAgICBwYXR0ZXJuICtcbiAgICAgICAgICAgICAgJ1tcXFxcc1xcXFxTXSo/KSg/OlxcXFxyP1xcXFxufFxcXFxyKXsyfVtcXFxcc1xcXFxTXSonLFxuICAgICAgICAgICAgJ2knXG4gICAgICAgICAgKSxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgcmVzdDogaHR0cExhbmd1YWdlc1tjb250ZW50VHlwZV1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2h0dHAnLCAnaGVhZGVyLW5hbWUnLCBvcHRpb25zKVxuICAgIH1cbiAgfSkoUHJpc20pXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/refractor/lang/http.js\n"));

/***/ })

}]);